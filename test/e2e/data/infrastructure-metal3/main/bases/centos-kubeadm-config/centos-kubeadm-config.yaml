---
apiVersion: controlplane.cluster.x-k8s.io/v1beta2
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}
  namespace: ${NAMESPACE}
spec:
  kubeadmConfigSpec:
    files:
    - content: |
        #!/bin/bash
        set -e
        url="$1"
        dst="$2"
        filename="$(basename $url)"
        tmpfile="/tmp/$filename"
        curl -sSL -w "%{http_code}" "$url" | sed "s:/usr/bin:/usr/local/bin:g" > /tmp/"$filename"
        http_status=$(cat "$tmpfile" | tail -n 1)
        if [ "$http_status" != "200" ]; then
          echo "Error: unable to retrieve $filename file";
          exit 1;
        else
          cat "$tmpfile"| sed '$d' > "$dst";
        fi
      owner: root:root
      path: /usr/local/bin/retrieve.configuration.files.sh
      permissions: "0755"
    - path: /etc/keepalived/keepalived.conf
      content: |
        ! Configuration File for keepalived
        global_defs {
            notification_email {
            sysadmin@example.com
            support@example.com
            }
            notification_email_from lb@example.com
            smtp_server localhost
            smtp_connect_timeout 30
        }

        vrrp_script k8s_api_check {
            script "curl -sk https://127.0.0.1:6443/healthz"
            interval 5
            timeout 5
            rise 3
            fall 3
        }

        vrrp_instance VI_1 {
            state MASTER
            interface enp2s0
            virtual_router_id 1
            priority 101
            advert_int 1
            virtual_ipaddress {
                ${CLUSTER_APIENDPOINT_HOST}
            }
            track_script {
                k8s_api_check
            }
        }
    - path: /etc/NetworkManager/system-connections/enp1s0.nmconnection
      owner: root:root
      permissions: '0600'
      content: |
        [connection]
        id=enp1s0
        type=ethernet
        interface-name=enp1s0
        master=ironicendpoint
        slave-type=bridge
    - content: |
        [connection]
        id=ironicendpoint
        type=bridge
        interface-name=ironicendpoint
        autoconnect=yes
        autoconnect-priority=1

        [bridge]
        stp=false
        interface-name=ironicendpoint

        [ipv4]
        address1={{ ds.meta_data.provisioningIP }}/{{ ds.meta_data.provisioningCIDR }}
        method=manual

        [ipv6]
        addr-gen-mode=eui64
        method=ignore
      path: /etc/NetworkManager/system-connections/ironicendpoint.nmconnection
      owner: root:root
      permissions: '0600'
    - content: |
        [registries.search]
        registries = ['docker.io']

        [registries.insecure]
        registries = ['${REGISTRY}']
      path: /etc/containers/registries.conf
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
        - name: cgroup-driver
          value: systemd
        - name: container-runtime-endpoint
          value: unix:///var/run/crio/crio.sock
        - name: feature-gates
          value: AllAlpha=false
        - name: node-labels
          value: 'metal3.io/uuid={{ ds.meta_data.uuid }}'
        - name: provider-id
          value: '${PROVIDER_ID_FORMAT}'
        - name: runtime-request-timeout
          value: '5m'
        name: '{{ ds.meta_data.name }}'
    joinConfiguration:
      controlPlane: {}
      nodeRegistration:
        kubeletExtraArgs:
        - name: cgroup-driver
          value: systemd
        - name: container-runtime-endpoint
          value: unix:///var/run/crio/crio.sock
        - name: feature-gates
          value: AllAlpha=false
        - name: node-labels
          value: 'metal3.io/uuid={{ ds.meta_data.uuid }}'
        - name: provider-id
          value: '${PROVIDER_ID_FORMAT}'
        - name: runtime-request-timeout
          value: '5m'
        name: '{{ ds.meta_data.name }}'
    preKubeadmCommands:
      - rm /etc/cni/net.d/*
      - systemctl restart NetworkManager.service
      - nmcli connection load /etc/NetworkManager/system-connections/ironicendpoint.nmconnection
      - nmcli connection up ironicendpoint
      - nmcli connection load /etc/NetworkManager/system-connections/enp1s0.nmconnection
      - nmcli connection up enp1s0
      - systemctl enable --now keepalived
      - sleep 60
      - systemctl enable --now crio kubelet
    postKubeadmCommands:
      - mkdir -p /home/${IMAGE_USERNAME}/.kube
      - chown ${IMAGE_USERNAME}:${IMAGE_USERNAME} /home/${IMAGE_USERNAME}/.kube
      - cp /etc/kubernetes/admin.conf /home/${IMAGE_USERNAME}/.kube/config
      - chown ${IMAGE_USERNAME}:${IMAGE_USERNAME} /home/${IMAGE_USERNAME}/.kube/config

---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta2
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-workers
  namespace: ${NAMESPACE}
spec:
  template:
    spec:
      files:
      - content: |
          #!/bin/bash
          set -e
          url="$1"
          dst="$2"
          filename="$(basename $url)"
          tmpfile="/tmp/$filename"
          curl -sSL -w "%{http_code}" "$url" | sed "s:/usr/bin:/usr/local/bin:g" > /tmp/"$filename"
          http_status=$(cat "$tmpfile" | tail -n 1)
          if [ "$http_status" != "200" ]; then
            echo "Error: unable to retrieve $filename file";
            exit 1;
          else
            cat "$tmpfile"| sed '$d' > "$dst";
          fi
        owner: root:root
        path: /usr/local/bin/retrieve.configuration.files.sh
        permissions: "0755"
      - content: |
          [connection]
          id=enp1s0
          type=ethernet
          interface-name=enp1s0
          master=ironicendpoint
          slave-type=bridge
          autoconnect=yes
          autoconnect-priority=999
        path: /etc/NetworkManager/system-connections/enp1s0.nmconnection
        owner: root:root
        permissions: '0600'
      - path: /etc/NetworkManager/system-connections/ironicendpoint.nmconnection
        owner: root:root
        permissions: '0600'
        content: |
          [connection]
          id=ironicendpoint
          type=bridge
          interface-name=ironicendpoint

          [bridge]
          stp=false

          [ipv4]
          address1={{ ds.meta_data.provisioningIP }}/{{ ds.meta_data.provisioningCIDR }}
          method=manual

          [ipv6]
          addr-gen-mode=eui64
          method=ignore
      - path : /etc/containers/registries.conf
        owner: root:root
        permissions: '0644'
        content: |
          [registries.search]
          registries = ['docker.io']

          [registries.insecure]
          registries = ['${REGISTRY}']
      preKubeadmCommands:
      - rm /etc/cni/net.d/*
      - systemctl restart NetworkManager.service
      - nmcli connection load /etc/NetworkManager/system-connections/ironicendpoint.nmconnection
      - nmcli connection up ironicendpoint
      - nmcli connection load /etc/NetworkManager/system-connections/enp1s0.nmconnection
      - nmcli connection up enp1s0
      - systemctl enable --now crio kubelet
      - sleep 120
