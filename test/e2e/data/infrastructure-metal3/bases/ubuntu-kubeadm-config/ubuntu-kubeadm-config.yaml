---
apiVersion: controlplane.cluster.x-k8s.io/${CAPI_VERSION}
kind: KubeadmControlPlane
metadata:
  name: ${CLUSTER_NAME}
  namespace: ${NAMESPACE}
spec:
  kubeadmConfigSpec:
    files:
    - content: |
        #!/bin/bash
        while :; do
          curl -sk https://127.0.0.1:6443/healthz 1>&2 > /dev/null
          isOk=$?
          isActive=$(systemctl show -p ActiveState keepalived.service | cut -d'=' -f2)
          if [ $isOk == "0" ] &&  [ $isActive != "active" ]; then
            logger 'API server is healthy, however keepalived is not running, starting keepalived'
            echo 'API server is healthy, however keepalived is not running, starting keepalived'
            sudo systemctl start keepalived.service
          elif [ $isOk != "0" ] &&  [ $isActive == "active" ]; then
            logger 'API server is not healthy, however keepalived running, stopping keepalived'
            echo 'API server is not healthy, however keepalived running, stopping keepalived'
            sudo systemctl stop keepalived.service
          fi
          sleep 5
        done
      owner: root:root
      path: /usr/local/bin/monitor.keepalived.sh
      permissions: "0755"
    - content: |
        [Unit]
        Description=Monitors keepalived adjusts status with that of API server
        After=syslog.target network-online.target

        [Service]
        Type=simple
        Restart=always
        ExecStart=/usr/local/bin/monitor.keepalived.sh

        [Install]
        WantedBy=multi-user.target
      owner: root:root
      path: /lib/systemd/system/monitor.keepalived.service
    - path: /etc/kubernetes/manifests/kube-vip.yaml
      content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-vip
          namespace: kube-system
        spec:
          containers:
            - name: kube-vip
              image: ghcr.io/kube-vip/kube-vip:v0.6.0
              args: ['manager']
              env:
                - name: vip_arp
                  value: 'true'
                - name: port
                  value: '6443'
                - name: vip_interface
                  value: 'enp1s0'
                - name: vip_cidr
                  value: '32'
                - name: cp_enable
                  value: 'true'
                - name: cp_namespace
                  value: 'kube-system'
                - name: vip_address
                  value: '192.168.111.100'
              securityContext:
                capabilities:
                  add: ['NET_ADMIN', 'NET_RAW']
          hostNetwork: true`)
    - content: |
        [registries.search]
        registries = ['docker.io']

        [registries.insecure]
        registries = ['${REGISTRY}']
      path: /etc/containers/registries.conf
    joinConfiguration:
      controlPlane: {}
      nodeRegistration:
        kubeletExtraArgs:
          cgroup-driver: systemd
          container-runtime-endpoint: unix:///var/run/crio/crio.sock
          feature-gates: AllAlpha=false
          node-labels: metal3.io/uuid={{ ds.meta_data.uuid }}
          provider-id: ${PROVIDER_ID_FORMAT}
          runtime-request-timeout: 5m
        name: '{{ ds.meta_data.name }}'
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cgroup-driver: systemd
          container-runtime-endpoint: unix:///var/run/crio/crio.sock
          feature-gates: AllAlpha=false
          node-labels: metal3.io/uuid={{ ds.meta_data.uuid }}
          provider-id: ${PROVIDER_ID_FORMAT}
          runtime-request-timeout: 5m
        name: '{{ ds.meta_data.name }}'
    postKubeadmCommands:
    - mkdir -p /home/${IMAGE_USERNAME}/.kube
    - chown ${IMAGE_USERNAME}:${IMAGE_USERNAME} /home/${IMAGE_USERNAME}/.kube
    - cp /etc/kubernetes/admin.conf /home/${IMAGE_USERNAME}/.kube/config
    - systemctl enable --now keepalived
    - chown ${IMAGE_USERNAME}:${IMAGE_USERNAME} /home/${IMAGE_USERNAME}/.kube/config
    preKubeadmCommands:
    - sed -i "s/MACAddressPolicy=persistent/MACAddressPolicy=none/g" /usr/lib/systemd/network/99-default.link
    - netplan apply
    - systemctl enable --now crio kubelet
    - if (curl -sk --max-time 10 https://${CLUSTER_APIENDPOINT_HOST}:${CLUSTER_APIENDPOINT_PORT}/healthz); then echo "keepalived already running";else systemctl start keepalived; fi
    - systemctl enable --now /lib/systemd/system/monitor.keepalived.service
---
apiVersion: bootstrap.cluster.x-k8s.io/${CAPI_VERSION}
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-workers
  namespace: ${NAMESPACE}
spec:
  template:
    spec:
      files:
      - content: |
          network:
            version: 2
            renderer: networkd
            bridges:
              ${CLUSTER_PROVISIONING_INTERFACE}:
                interfaces: [enp1s0]
                addresses:
                - {{ ds.meta_data.provisioningIP }}/{{ ds.meta_data.provisioningCIDR }}
        owner: root:root
        path: /etc/netplan/52-ironicendpoint.yaml
        permissions: "0644"
      - content: |
          [registries.search]
          registries = ['docker.io']

          [registries.insecure]
          registries = ['${REGISTRY}']
        path: /etc/containers/registries.conf
      preKubeadmCommands:
      - sed -i "s/MACAddressPolicy=persistent/MACAddressPolicy=none/g" /usr/lib/systemd/network/99-default.link
      - netplan apply
      - systemctl enable --now crio kubelet
